import java.io.*;
import java.util.*;
public class Main {
    static long tree[];
    static int MOD;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());
        MOD = 1000000007;

        int treeHeight = 0;
        int nodeCount = N;

        while (nodeCount != 0){
            nodeCount /= 2;
            treeHeight++;
        }
        int treeSize = (int)Math.pow(2, treeHeight+1);
        tree = new long[treeSize+1];
        int startIndex = treeSize/2-1;
        for(int i=0; i<tree.length; i++){
            tree[i] = 1;
        }
        for(int i=startIndex+1; i<=startIndex+N; i++){
            tree[i] = Long.parseLong(br.readLine());
        }
        setTree(treeSize-1);

        for(int i=0; i<M+K; i++){
            st = new StringTokenizer(br.readLine());
            long a = Long.parseLong(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            long c = Long.parseLong(st.nextToken());
            if(a == 1){
                update(b+startIndex, c);
            } else if (a == 2) {
                System.out.println(multify(b+startIndex,(int)(c+startIndex)));
            }
        }
    }

    static void update(int b, long c){
        tree[b] = c;
        while (b > 1){
            b = b/2;
            tree[b] = tree[b*2] % MOD * tree[b*2+1]%MOD;
        }
    }

    static long multify(int startIndex, int endIndex){
        long multify = 1;
        while (startIndex <= endIndex){
            if(startIndex % 2 == 1){
                multify *= tree[startIndex]%MOD;
                startIndex++;
            }

            if(endIndex % 2 == 0){
                multify *= tree[endIndex]%MOD;
                endIndex--;
            }

            startIndex = startIndex/2;
            endIndex = endIndex/2;
        }
        return multify;
    }

    static void setTree(int i){
        while (i != 1){
            tree[i/2] = tree[i/2] * tree[i] % MOD;
            i--;
        }
    }
}
