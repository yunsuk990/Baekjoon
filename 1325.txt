import java.io.*;
import java.util.*;
public class Main {
    static boolean visited[];
    static int ans[];
    static ArrayList<Integer>[] graph;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        graph = new ArrayList[N+1];
        ans = new int[N+1];
        for(int i=1; i<=N; i++){
            graph[i] = new ArrayList<>();
        }
        for(int i=0; i<M; i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            graph[a].add(b);
        }
        for(int i=1; i<=N; i++){
            visited = new boolean[N+1];
            bfs(i);
        }
        int max = 0;
        for(int i=1; i<=N; i++){
            max = Math.max(max, ans[i]);
        }
        for(int i=1; i<=N; i++){
            if(ans[i] == max){
                bw.write(i+" ");
            }
        }
        bw.flush();
    }
    static void bfs(int start){
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        visited[start] = true;
        while (!q.isEmpty()){
            int node = q.poll();
            for(int i : graph[node]){
                if(!visited[i]){
                    visited[i] = true;
                    ans[i] ++;
                    q.add(i);
                }
            }
        }
    }
}