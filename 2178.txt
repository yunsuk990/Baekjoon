import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
public class Main {
    static int[][] maze;
    static boolean[][] check;
    static int[] X = {0,0,1,-1};
    static int[] Y = {1,-1,0,0};
    static int N;
    static int M;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        maze = new int[N][M];
        check = new boolean[N][M];
        for(int i=0; i<N; i++) {
            String s = br.readLine();
            for(int j=0; j<M; j++) {
                maze[i][j] = s.charAt(j) - '0';
            }
        }
        bfs(0,0);
        System.out.println(maze[N-1][M-1]);
    }

    static void bfs(int x, int y){

        Queue<int[]> queue = new LinkedList<>();
        check[x][y] = true;
        queue.offer(new int[]{x, y});

        while (!queue.isEmpty()){
            int[] v = queue.poll();
            for(int i=0; i<4;i++){
                int afterX = v[0] + X[i];
                int afterY = v[1] + Y[i];
                if(checkRange(afterX, afterY) && maze[afterX][afterY] == 1 && check[afterX][afterY] == false){
                    queue.add(new int[]{afterX, afterY});
                    maze[afterX][afterY] = maze[v[0]][v[1]] + 1;
                    check[afterX][afterY] = true;
                }
            }
        }
    }
    static boolean checkRange(int x, int y){
        return (x>=0 && x<N && y>=0 && y<M);
    }
}