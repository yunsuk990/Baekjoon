import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
    static boolean visited[][];
    static int count = 0, number = 0;
    static int[][] map;
    static int nowX ,nowY;
    static int[] dirX = {0,0,-1,1};
    static int[] dirY = {-1,1,0,0};
    static int n;
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        ArrayList<Integer> ApartCount = new ArrayList();
        map = new int[n][n];
        visited = new boolean[n][n];
        for(int i=0; i<n; i++){
            String str = br.readLine();
            for(int j=0; j<n; j++){
                map[i][j] = Character.getNumericValue(str.charAt(j));
            }
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(visited[i][j] == false && map[i][j] == 1){
                    count = 0;
                    number++;
                    dfs(i,j);
                    ApartCount.add(count);
                }
            }
        }
        Collections.sort(ApartCount);
        System.out.println(number);
        for(int item : ApartCount){
            System.out.println(item);
        }
    }
    static void dfs(int x, int y){
        visited[x][y] = true;
        map[x][y] = number;
        count++;
        for(int i =0; i<4; i++){
            nowX = dirX[i] + x;
            nowY = dirY[i] + y;
            if(checkRange(nowX, nowY) && map[nowX][nowY] == 1 && visited[nowX][nowY] == false){
                visited[nowX][nowY] = true;
                map[nowX][nowY] = number;
                dfs(nowX,nowY);
            }
        }
    }
    static boolean checkRange(int nowX, int nowY){
        return (nowX >=0 && nowX <n && nowY>=0 && nowY<n);
    }
}