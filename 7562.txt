import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static int[][] visited;
    static int[][] map;

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for(int i=0; i<t;i++){
            int l = scanner.nextInt();
            int x1 = scanner.nextInt();
            int x2 = scanner.nextInt();
            int y1 = scanner.nextInt();
            int y2 = scanner.nextInt();
            map = new int[l][l];
            visited = new int[l][l];
            int[] x = new int[]{x1,x2};
            int[] y = new int[]{y1,y2};
            System.out.println(bfs(x,y));
        }
    }

    static int bfs(int[] x, int[] y){
        Queue<int []> queue = new LinkedList<>();
        queue.offer(x);
        while (!queue.isEmpty()){
            int[] now = queue.poll();
            int nowx1 = now[0];
            int nowx2 = now[1];
            if(nowx1 == y[0] && nowx2 == y[1]){
                return visited[nowx1][nowx2];
            }
            if(checkRange(nowx1-2, nowx2-1) && visited[nowx1-2][nowx2-1] == 0){
                queue.offer(new int[]{nowx1-2, nowx2-1});
                visited[nowx1-2][nowx2-1] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1-2, nowx2+1) && visited[nowx1-2][nowx2+1] == 0){
                queue.offer(new int[]{nowx1-2, nowx2+1});
                visited[nowx1-2][nowx2+1] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1-1, nowx2-2) && visited[nowx1-1][nowx2-2] == 0){
                queue.offer(new int[]{nowx1-1, nowx2-2});
                visited[nowx1-1][nowx2-2] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1-1, nowx2+2) && visited[nowx1-1][nowx2+2] == 0){
                queue.offer(new int[]{nowx1-1, nowx2+2});
                visited[nowx1-1][nowx2+2] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1+1, nowx2-2) && visited[nowx1+1][nowx2-2] == 0){
                queue.offer(new int[]{nowx1+1, nowx2-2});
                visited[nowx1+1][nowx2-2] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1+1, nowx2+2) && visited[nowx1+1][nowx2+2] == 0){
                queue.offer(new int[]{nowx1+1, nowx2+2});
                visited[nowx1+1][nowx2+2] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1+2, nowx2-1) && visited[nowx1+2][nowx2-1] == 0){
                queue.offer(new int[]{nowx1+2, nowx2-1});
                visited[nowx1+2][nowx2-1] = visited[nowx1][nowx2] + 1;
            }
            if(checkRange(nowx1+2, nowx2+1) && visited[nowx1+2][nowx2+1] == 0){
                queue.offer(new int[]{nowx1+2, nowx2+1});
                visited[nowx1+2][nowx2+1] = visited[nowx1][nowx2] + 1;
            }
        }
        return -1;
    }

    static boolean checkRange(int x, int y){
        return (x>=0 && x< map.length && y>=0 && y < map.length);
    }
}