import java.io.IOException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static int[][] map;

    static int[] X = {0,0,-1,1};
    static int[] Y = {-1,1,0,0};
    static int x;
    static int y;
    static Queue<int []> queue = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);
        y = scanner.nextInt();
        x = scanner.nextInt();
        map = new int[x][y];
        for(int i=0; i<x; i++){
            for (int j=0; j<y; j++){
                int user = scanner.nextInt();
                map[i][j] = user;
                if(user == 1){
                    queue.offer(new int[]{i,j});
                }

            }
        }
        System.out.println(bfs());
    }

    static int bfs(){
        int nowx1 = 0;
        int nowx2 = 0;
        while (!queue.isEmpty()){
            int[] now = queue.poll();
            nowx1 = now[0];
            nowx2 = now[1];
            for (int i=0;i<4; i++){
                int nowX = nowx1 + X[i];
                int nowY = nowx2 + Y[i];
                if(checkRange(nowX, nowY) && map[nowX][nowY] == 0){
                    queue.offer(new int[]{nowX, nowY});
                    map[nowX][nowY] = map[nowx1][nowx2] + 1;
                }
            }
        }
        if(checkZero()){
            return -1;
        }else{
            return map[nowx1][nowx2]-1;
        }
    }

    static boolean checkRange(int x1, int y1){
        return (x1>=0 && x1 < x && y1>=0 && y1 < y);
    }

    static boolean checkZero(){
        for(int i=0; i<x; i++){
            for (int j=0; j<y; j++) {
                if(map[i][j] == 0) return true;
            }
        }
        return false;
    }
}