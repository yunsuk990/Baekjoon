import java.util.*;
    class Solution {
            static int[] x = {-1,1,0,0};
            static int[] y = {0,0,1,-1};
            static int[] start;
            static char[][] map;
            static boolean visited[][];
            public int solution(String[] board) {
                map = new char[board.length][board[0].length()];
                visited = new boolean[board.length][board[0].length()];
                start = new int[2];

                for(int i=0; i<board.length; i++){
                    for(int j=0; j<board[0].length(); j++){
                        char s = board[i].charAt(j);
                        map[i][j] = s;
                        if(s == 'R'){
                            start[0] = i;
                            start[1] = j;
                        }
                    }
                }
                visited[start[0]][start[1]] = true;
                return bfs();
            }

            int bfs(){
                Queue<int[]> q = new LinkedList();
                q.offer(new int[]{start[0], start[1], 0});
                while(!q.isEmpty()){
                    int[] now = q.poll();
                    int nowX = now[0];
                    int nowY = now[1];
                    int count = now[2];

                    if(map[nowX][nowY] == 'G'){
                        return count;
                    }

                    for(int i=0; i<4; i++){
                        int[] next = route(nowX, nowY, i);
                        if(visited[next[0]][next[1]]) continue;
                        visited[next[0]][next[1]] = true;
                        q.offer(new int[]{next[0], next[1], count+1});
                    }
                }
                return -1;
            }

            int[] route(int nowX, int nowY, int dir){
                while (true){
                    int nextX = nowX + x[dir];
                    int nextY = nowY + y[dir];
                    if(!check(nextX,nextY) || map[nextX][nextY] == 'D') break;
                    nowX = nextX;
                    nowY = nextY;
                }
                return new int[]{nowX, nowY};
            }

            boolean check(int x, int y){
                if(x >= 0 && x<map.length && y>=0 && y<map[0].length){
                    return true;
                }else{
                    return false;
                }
            }
        }